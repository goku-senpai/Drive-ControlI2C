<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="class_hardware_timer" kind="class" language="C++" prot="public">
    <compoundname>HardwareTimer</compoundname>
    <includes refid="timer_8h" local="no">timer.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hardware_timer_1a53453cf2364cb90656dbb32366305bb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HardwareTimer::HardwareTimer</definition>
        <argsstring>(uint8_t iTim, uint16_t prescaler, uint32_t period, bool bReload=true)</argsstring>
        <name>HardwareTimer</name>
        <qualifiedname>HardwareTimer::HardwareTimer</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>iTim</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>prescaler</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReload</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize Timer Hardware</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dTim</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance (0 - 3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prescaler</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into prescaler register (2 - 65536) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write into period register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="21" column="5" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_hardware_timer_1acd4c3e81ac97014661c8f94155f49ac2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>hw_timer_t *</type>
        <definition>hw_timer_t * HardwareTimer::handle</definition>
        <argsstring>()</argsstring>
        <name>handle</name>
        <qualifiedname>HardwareTimer::handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return HAL handle to timer object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="29" column="16" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_hardware_timer_1a01b687bda6159f35cc5a3238e7860cba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void HardwareTimer::setCallback</definition>
        <argsstring>(void(*callback)())</argsstring>
        <name>setCallback</name>
        <qualifiedname>HardwareTimer::setCallback</qualifiedname>
        <param>
          <type>void(*)()</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>configure callback on PERIOD ELAPSED event <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="37" column="10" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_hardware_timer_1af11b73a57af629b8082eb49799caf9ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void HardwareTimer::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>HardwareTimer::start</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>start timer in interrupt mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="44" column="10" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_hardware_timer_1a4c5fe015984b19fed7e3f33fedfa92c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t HardwareTimer::getMillis</definition>
        <argsstring>()</argsstring>
        <name>getMillis</name>
        <qualifiedname>HardwareTimer::getMillis</qualifiedname>
        <briefdescription>
<para>Get the counter of the timer in millis. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="53" column="14" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_hardware_timer_1a67592105e89189dadad5596f5fe07998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t HardwareTimer::getMicros</definition>
        <argsstring>()</argsstring>
        <name>getMicros</name>
        <qualifiedname>HardwareTimer::getMicros</qualifiedname>
        <briefdescription>
<para>Get the counter of the timer in micros. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="62" column="14" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="62" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Template class for hardware based Timers 4 x 64 bit Timers fors ESP32 with 16 bit prescalar. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" line="12" column="1" bodyfile="D:/git/fertigung/lucy-esp/software/microcontroller/include/esp32/timer.h" bodystart="12" bodyend="72"/>
    <listofallmembers>
      <member refid="class_hardware_timer_1a67592105e89189dadad5596f5fe07998" prot="public" virt="non-virtual"><scope>HardwareTimer</scope><name>getMicros</name></member>
      <member refid="class_hardware_timer_1a4c5fe015984b19fed7e3f33fedfa92c9" prot="public" virt="non-virtual"><scope>HardwareTimer</scope><name>getMillis</name></member>
      <member refid="class_hardware_timer_1acd4c3e81ac97014661c8f94155f49ac2" prot="public" virt="non-virtual"><scope>HardwareTimer</scope><name>handle</name></member>
      <member refid="class_hardware_timer_1a53453cf2364cb90656dbb32366305bb7" prot="public" virt="non-virtual"><scope>HardwareTimer</scope><name>HardwareTimer</name></member>
      <member refid="class_hardware_timer_1a01b687bda6159f35cc5a3238e7860cba" prot="public" virt="non-virtual"><scope>HardwareTimer</scope><name>setCallback</name></member>
      <member refid="class_hardware_timer_1af11b73a57af629b8082eb49799caf9ec" prot="public" virt="non-virtual"><scope>HardwareTimer</scope><name>start</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
